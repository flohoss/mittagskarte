package components

import (
	"github.com/flohoss/mittagskarte/config"
	"github.com/flohoss/mittagskarte/pkg/humanize"
)

func getBgImage(r *config.Restaurant) string {
	return "background-image: url(/thumbnails/" + r.ID + ".webp);"
}

func getBgImageWithFallback(r *config.Restaurant) string {
	return "background-image: url(/thumbnails/" + r.ID + ".webp), linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);"
}

func getOpacity(closed bool) string {
	if closed {
		return "opacity-20 group-hover:opacity-60"
	}
	return "opacity-60 group-hover:opacity-100"
}

func getCardClasses(closed bool) string {
	if closed {
		return "group my-card opacity-75"
	}
	return "group my-card"
}

func favTooltip(fav bool) string {
	if fav {
		return "Aus Favoriten entfernen"
	}
	return "Zu Favoriten hinzufügen"
}

func getStarIconClass(group string) string {
	if group == config.Favorites {
		return "icon-[heroicons--star-solid] size-5"
	}
	return "icon-[heroicons--star] size-5"
}

templ Card(g *config.GroupedRestaurants, r *config.Restaurant) {
	{{ closed := r.IsClosed() }}
	<div class={ getCardClasses(closed) }>
		<div class="flex items-center gap-2 px-1">
			<div class="flex-1 truncate min-w-0">
				<div class="truncate font-semibold">{ r.Name }</div>
				<div class="grid gap-1">
					<div class="truncate text-xs text-base-content/70">{ humanize.Since(r.Menu.Modified) }</div>
					if len(r.Tags) > 0 {
						<div class="flex flex-wrap gap-1 mb-1">
							for _, tag := range r.Tags {
								<button
									class="badge badge-xs badge-secondary rounded-xl hover:badge-primary cursor-pointer transition-colors duration-200"
									hx-get="/filter"
									hx-vals={ `{"q": "` + tag + `"}` }
									hx-target="#restaurants-container"
									hx-swap="innerHTML"
									hx-on:click="document.querySelector('input[name=q]').value = this.textContent"
									title={ "Nach '" + tag + "' filtern" }
									aria-label={ "Filter nach " + tag }
								>
									{ tag }
								</button>
							}
						</div>
					}
				</div>
			</div>
			if (r.New && g.Group != config.Favorites) {
				<div title="Neu hinzugefügt!">
					<span class="icon-[heroicons--bell] size-5 text-warning animate-pulse"></span>
				</div>
			}
			if (g != nil) {
				<a 
					class={ "btn btn-ghost hover:text-warning btn-link shrink-0 p-0 transition-colors duration-200", templ.KV("link-warning", g.Group == config.Favorites) } 
					title={ favTooltip(g.Group == config.Favorites) } 
					href={ templ.URL("/?fav=" + r.ID + "&group=" + r.Group) }
					aria-label={ favTooltip(g.Group == config.Favorites) }
				>
					<span class={ getStarIconClass(g.Group) }></span>
				</a>
			}
		</div>
		<div class={ "relative h-28 w-full rounded-xl bg-cover bg-center transition duration-300 ease-in-out", templ.KV("grayscale-75", closed), getOpacity(closed) } style={ getBgImageWithFallback(r) }>
			if closed {
				<div class="absolute inset-0 bg-black/20 rounded-xl"></div>
			}
		</div>
		if (closed) {
			<div class="badge badge-soft rounded-xl badge-sm absolute top-1/2 left-1/2 -translate-x-1/2 translate-y-1/2 -rotate-15">Heute Geschlossen</div>
		}
		@Controls(r)
	</div>
}
