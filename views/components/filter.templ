package components

templ Filter() {
	<div class="relative w-full lg:w-100">
		<label for="search-input" class="sr-only">Restaurant suchen</label>
		<div class="input w-full rounded-lg relative flex items-center gap-3 focus-within:ring-2 focus-within:ring-primary/20 transition-all duration-200">
			<span class="icon-[heroicons--magnifying-glass] size-5 text-base-content/60 flex-shrink-0"></span>
			<input
				type="search"
				name="q"
				id="search-input"
				class="grow bg-transparent border-0 outline-0 focus:ring-0 placeholder:text-base-content/50"
				placeholder="Restaurant, Küche oder Tags suchen..."
				hx-get="/filter"
				hx-trigger="keyup changed delay:300ms"
				hx-target="#restaurants-container"
				hx-swap="innerHTML"
				hx-indicator="#search-loading"
				autocomplete="off"
				spellcheck="false"
				aria-describedby="search-help"
			/>
			<!-- Loading spinner -->
			<div id="search-loading" class="htmx-indicator flex-shrink-0">
				<span class="loading loading-spinner loading-sm text-base-content"></span>
			</div>
		</div>
		<div id="search-help" class="sr-only">
			Suchen Sie nach Restaurantname, Küchenart oder Tags. Die Suche erfolgt automatisch während der Eingabe.
		</div>
	</div>
	<script>
		// Simple search focus management
		document.addEventListener('DOMContentLoaded', () => {
			const input = document.getElementById('search-input');
			if (!input) return;
			
			// Global keyboard shortcuts
			document.addEventListener('keydown', (e) => {
				// Ctrl/Cmd + K focuses search (prevent default to override browser behavior)
				if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
					e.preventDefault();
					input.focus();
					input.select();
				}
			});

            // Clear search on Escape
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    input.value = '';
                    input.dispatchEvent(new Event('input', { bubbles: true }));
                    input.dispatchEvent(new Event('change', { bubbles: true }));
                    input.dispatchEvent(new KeyboardEvent('keyup', { bubbles: true }));
                }
            });
			
			// Handle browser back/forward navigation
			window.addEventListener('popstate', () => {
				const urlParams = new URLSearchParams(window.location.search);
				const query = urlParams.get('q') || '';
				if (input.value !== query) {
					input.value = query;
				}
			});
		});
	</script>
}
