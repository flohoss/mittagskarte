package components

import "github.com/flohoss/mittagskarte/config"

func getGridCols(r *config.Restaurant) string {
	if r.Menu.URL == "" {
		return "grid-cols-4"
	}
	return "grid-cols-5"
}

func getModalID(r *config.Restaurant, suffix string) string {
	if r == nil {
		return ""
	}
	return "modal_" + r.ID + "_" + suffix
}

func getModalAction(r *config.Restaurant, suffix string) templ.ComponentScript {
	if r == nil {
		return templ.ComponentScript{}
	}
	return templ.ComponentScript{
		Name:       "open_modal_" + r.ID + "_" + suffix,
		Call:       getModalID(r, suffix) + ".showModal()",
		CallInline: getModalID(r, suffix) + ".showModal()",
	}
}

func imgClass(m *config.Menu) string {
	if m.Landscape {
		return "lg:max-w-2xl xl:max-w-4xl"
	}
	return "lg:max-w-xl max-w-2xl"
}

func getButtonClass(isDisabled bool) string {
	if isDisabled {
		return "my-btn btn-neutral opacity-50 cursor-not-allowed"
	}
	return "my-btn btn-neutral hover:btn-primary transition-colors duration-200"
}

templ Controls(r *config.Restaurant) {
	<div class={ "grid gap-2 w-full", getGridCols(r) }>
		if r.Menu.URL != "" {
			<div class="relative inline-block">
				<a
					href={ templ.URL(r.Menu.URL) }
					class="my-btn btn-primary hover:btn-primary-focus transition-colors duration-200"
					target="_blank"
					data-lg-blank
					rel="noopener noreferrer"
					onmouseenter={ templ.JSFuncCall("showTooltip", templ.JSExpression("event"), "tooltip_menu_"+r.ID) }
					onmouseleave={ templ.JSFuncCall("hideTooltip", "tooltip_menu_"+r.ID) }
					aria-label="Menü anzeigen"
				>
					<span class="icon-[heroicons--document-text] btn-icon"></span>
				</a>
				<div
					id={ "tooltip_menu_" + r.ID }
					class="hidden absolute z-50 p-2 rounded-lg bg-base-100 shadow-xl border border-base-300 max-h-screen overflow-y-auto"
					style="will-change: transform; -webkit-transform: translateZ(0);"
				>
					<img 
						height={ r.Menu.Height } 
						width={ r.Menu.Width } 
						src={ templ.URL(r.Menu.URL) } 
						alt={ "Menü von " + r.Name } 
						class={ "object-contain w-auto", imgClass(&r.Menu) }
						loading="lazy"
					/>
				</div>
			</div>
		}
		if r.Parse.UpdateCron != "" {
			<button
				class={ getButtonClass(r.Loading) }
				title="Aktualisieren"
				if r.Loading {
					disabled
					aria-label="Wird aktualisiert..."
				} else {
					aria-label="Menü aktualisieren"
				}
				hx-put={ "/update/" + r.ID }
				hx-trigger="click"
				hx-target="#restaurants-container"
				hx-swap="innerHTML"
				hx-on::before-request={ templ.JSFuncCall("startUpdate", templ.JSExpression("event")) }
				hx-on::after-request={ templ.JSFuncCall("stopUpdate", templ.JSExpression("event")) }
			>
				<span class={ "loading loading-spinner btn-icon", templ.KV("hidden",!r.Loading) }></span>
				<span class={ "icon-[heroicons--arrow-path] btn-icon transition-transform duration-200", templ.KV("hidden",r.Loading) }></span>
			</button>
		} else {
			<button onclick={ getModalAction(r, "upload") } class="my-btn btn-neutral hover:btn-primary transition-colors duration-200" title="Hochladen" aria-label="Menü hochladen">
				<span class="icon-[heroicons--arrow-up-tray] btn-icon"></span>
			</button>
		}
		<a 
			href={ templ.URL("https://www.google.com/maps/search/?api=1&query=" + r.Address) } 
			target="_blank" 
			rel="noopener noreferrer"
			class="my-btn btn-neutral hover:btn-primary transition-colors duration-200"
			title="Navigieren"
			aria-label={ "Navigation zu " + r.Name }
		>
			<span class="icon-[heroicons--map] btn-icon"></span>
		</a>
		<a 
			href={ templ.URL("tel:" + r.Phone) } 
			class="my-btn btn-neutral hover:btn-success transition-colors duration-200"
			title="Anrufen"
			aria-label={ "Anrufen: " + r.Phone }
		>
			<span class="icon-[heroicons--phone] btn-icon"></span>
		</a>
		<a 
			href={ templ.URL(r.PageUrl) } 
			target="_blank" 
			rel="noopener noreferrer"
			class="my-btn btn-neutral hover:btn-info transition-colors duration-200"
			title="Webseite"
			aria-label={ "Webseite von " + r.Name + " öffnen" }
		>
			<span class="icon-[heroicons--link] btn-icon"></span>
		</a>
	</div>
	if r.Parse.UpdateCron == "" {
		<dialog id={ getModalID(r, "upload") } class="modal">
			<div class="modal-box max-w-md">
				<form action={ templ.URL("/upload/" + r.ID) } method="post" enctype="multipart/form-data" class="space-y-4">
					<div class="mb-4">
						<h3 class="font-bold text-lg mb-2">Menü für { r.Name } hochladen</h3>
						<p class="text-sm text-base-content/70">Laden Sie ein neues Menü für dieses Restaurant hoch. Unterstützte Formate: PDF, JPG, PNG, WebP</p>
					</div>
					
					<div class="form-control">
						<label class="label" for={ "token_" + r.ID }>
							<span class="label-text">API Token</span>
						</label>
						<input 
							id={ "token_" + r.ID }
							required 
							type="password" 
							placeholder="Geben Sie Ihren API Token ein" 
							name="token" 
							class="input input-bordered w-full"
							autocomplete="off"
						/>
					</div>
					
					<div class="form-control">
						<label class="label" for={ "file_" + r.ID }>
							<span class="label-text">Menü-Datei</span>
						</label>
						<input 
							id={ "file_" + r.ID }
							type="file" 
							name="file" 
							class="file-input file-input-bordered w-full"
							accept=".pdf,.jpg,.jpeg,.png,.webp"
							required
						/>
					</div>
					
					<div class="modal-action">
						<button type="button" class="btn btn-ghost" onclick="this.closest('dialog').close()">
							Abbrechen
						</button>
						<button type="submit" class="btn btn-primary">
							<span class="icon-[heroicons--arrow-up-tray] w-4 h-4 mr-2"></span>
							Hochladen
						</button>
					</div>
				</form>
			</div>
			<form method="dialog" class="modal-backdrop">
				<button aria-label="Dialog schließen">close</button>
			</form>
		</dialog>
	}
}
