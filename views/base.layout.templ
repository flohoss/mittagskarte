package views

import (
	"github.com/flohoss/mittagskarte/config"
	"github.com/flohoss/mittagskarte/views/components"
	"os"
	"time"
)

var appVersion string

func init() {
	appVersion = os.Getenv("APP_VERSION")
	if appVersion == "" {
		appVersion = time.Now().Format("20060102150405")
	}
}

func appendVersionQuery(url string) string {
	return url + "?v=" + appVersion
}

templ Base(title string, searchBar bool) {
	{{
		analytics := config.GetAnalytics()
		meta := config.GetMeta()
		if title == "" {
			title = meta.Title + " - " + meta.Description
		}
	}}
	<!DOCTYPE html>
	<html lang="de">
		<head>
			<meta charset="UTF-8"/>
			<title>{ title }</title>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<meta name="description" content={ meta.Title + " - " + meta.Description }/>
			<meta property="og:title" content={ title }/>
			<meta property="og:description" content={ meta.Title + " - " + meta.Description }/>
			<meta property="og:type" content="website"/>
			<meta property="og:image" content="/assets/favicon/web-app-manifest-512x512.png"/>
			<meta property="og:locale" content="de_DE"/>
			<meta name="twitter:card" content="summary"/>
			<meta name="twitter:title" content={ title }/>
			<meta name="twitter:description" content={ meta.Title + " - " + meta.Description }/>
			<meta name="twitter:image" content="/assets/favicon/web-app-manifest-512x512.png"/>
			<link rel="icon" type="image/png" href="/assets/favicon/favicon-96x96.png" sizes="96x96"/>
			<link rel="icon" type="image/svg+xml" href="/assets/favicon/favicon.svg"/>
			<link rel="shortcut icon" href="/assets/favicon/favicon.ico"/>
			<link rel="apple-touch-icon" sizes="180x180" href="/assets/favicon/apple-touch-icon.png"/>
			<meta name="apple-mobile-web-app-title" content="Schniddzl"/>
			<meta name="apple-mobile-web-app-capable" content="yes"/>
			<meta name="apple-mobile-web-app-status-bar-style" content="default"/>
			<meta name="theme-color" content="#ffffff"/>
			<meta name="msapplication-TileColor" content="#ffffff"/>
			<link rel="manifest" href="/assets/favicon/site.webmanifest"/>
			if analytics.Enabled {
				<link rel="dns-prefetch" href={ "//" + analytics.Domain }/>
			}
			<link rel="stylesheet" href={ appendVersionQuery("/assets/css/style.css") }/>
			if analytics.Enabled {
				<script defer src={ templ.URL("https://" + analytics.Domain + "/script.js") } data-website-id={ analytics.WebsiteID }></script>
			}
			<script src={ appendVersionQuery("/assets/js/htmx.min.js") } defer></script>
			<script src={ appendVersionQuery("/assets/js/floating-ui/core.min.js") } defer></script>
			<script src={ appendVersionQuery("/assets/js/floating-ui/dom.min.js") } defer></script>
			<script src={ appendVersionQuery("/assets/js/menu-tooltip.js") } defer></script>
			<script src={ appendVersionQuery("/assets/js/update.js") } defer></script>
		</head>
		<body class="flex flex-col min-h-screen">
			<a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-2 focus:left-2 bg-primary text-primary-content px-4 py-2 rounded z-50">
				Zum Hauptinhalt springen
			</a>
			<header class="bg-base-200">
				<div class="container px-4 md:px-6">
					if searchBar {
						<div class="flex items-center gap-4 md:justify-between py-4">
							<a href="/" class="flex items-center gap-2 flex-shrink-0">
								<img src="/assets/favicon/schniddzl.webp" alt={ meta.Title } class="size-10"/>
								<div class="font-light font-stretch-semi-expanded min-w-0 hidden md:block">
									<div class="text-xl font-semibold truncate">{ meta.Title }</div>
									<div class="text-xs truncate">{ meta.Description }</div>
								</div>
							</a>
							<div class="flex-1 md:flex-initial md:max-w-md">
								@components.Filter()
							</div>
						</div>
					} else {
						<div class="navbar">
							<div class="navbar-start">
								<a href="/" class="flex items-center gap-2 min-w-0">
									<img src="/assets/favicon/schniddzl.webp" alt={ meta.Title } class="size-10 flex-shrink-0"/>
									<div class="font-light font-stretch-semi-expanded min-w-0">
										<div class="text-xl font-semibold truncate">{ meta.Title }</div>
										<div class="text-xs truncate">{ meta.Description }</div>
									</div>
								</a>
							</div>
						</div>
					}
				</div>
			</header>
			<main id="main-content" class="container my-5 md:my-10 flex-grow" role="main">
				<div id="display-helper" class="hidden md:block" aria-hidden="true"></div>
				{ children... }
			</main>
			<footer class="bg-base-200 text-base-content p-5">
				<div class="container px-4 flex flex-col md:flex-row justify-center md:justify-between items-center gap-5 text-center text-sm">
					<aside>
						<p>
							{ meta.Title + " - " + meta.Description }
							if config.GetImpressum().Enabled {
								- <a class="link" href="/impressum">Impressum</a>
							}
							- <a class="link" title="Source Code auf GitHub" target="_blank" data-lg-blank href={ templ.URL(os.Getenv("REPO")) }>Source Code</a>
						</p>
					</aside>
					<nav class="flex gap-2 items-center">
						for _, social := range meta.Social {
							<a target="_blank" data-lg-blank class="btn btn-circle btn-ghost" title={ social.Description } href={ templ.URL(social.URL) }>
								@templ.Raw(social.Icon)
							</a>
						}
					</nav>
				</div>
			</footer>
			<div id="toast-container" class="fixed bottom-4 right-4 z-50 flex flex-col items-end gap-2"></div>
			<script>
				window.addEventListener('error', function(e) {
					console.error('Global error:', e.error);
					const toast = document.createElement('div');
					toast.className = 'alert alert-error rounded-lg';
					toast.innerHTML = '<span>Ein unerwarteter Fehler ist aufgetreten. Bitte laden Sie die Seite neu.</span>';
					document.getElementById('toast-container').appendChild(toast);
					setTimeout(() => toast.remove(), 8000);
				});
				
				window.addEventListener('unhandledrejection', function(e) {
					console.error('Unhandled promise rejection:', e.reason);
					const toast = document.createElement('div');
					toast.className = 'alert alert-warning rounded-lg';
					toast.innerHTML = '<span>Ein Netzwerkfehler ist aufgetreten. Bitte versuchen Sie es erneut.</span>';
					document.getElementById('toast-container').appendChild(toast);
					setTimeout(() => toast.remove(), 6000);
				});
			</script>
		</body>
	</html>
}
